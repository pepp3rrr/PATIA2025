;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;; Hanoi towers
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(define (domain hanoi)
  (:requirements :strips :typing)
  (:types ring tower)
  (:predicates (on ?firstr - ring ?secondr - ring)
		   (ontower ?r - ring ?t - tower)
	       (clear ?r - ring)
	       (handempty)
		   (towerempty ?t - tower)
		   (onbase ?r - ring)
	       (holding ?r - ring)
		   (smaller ?firstr - ring ?secondr - ring)
	)
  (:action stack
	     :parameters (?firstr - ring ?secondr - ring ?t - tower)
	     :precondition (and (holding ?firstr) (clear ?secondr) (smaller ?firstr ?secondr) (ontower ?secondr ?t))
	     :effect
	     (and (not (holding ?firstr))
		   (not (clear ?secondr))
		   (clear ?firstr)
		   (handempty)
		   (on ?firstr ?secondr)
		   (ontower ?firstr ?t)))
  (:action unstack
	     :parameters (?firstr - ring ?secondr - ring ?t - tower)
	     :precondition (and (on ?firstr ?secondr) (clear ?firstr) (ontower ?firstr ?t) (ontower ?secondr ?t) (handempty))
	     :effect (and (holding ?firstr)
		   (clear ?secondr)
		   (not (clear ?firstr))
		   (not (handempty))
		   (not (on ?firstr ?secondr))
		   (not (ontower ?firstr ?t))
		)
	)
  (:action pickfrombase
	     :parameters (?r - ring ?t - tower)
	     :precondition (and (clear ?r) (ontower ?r ?t) (onbase ?r) (handempty))
	     :effect (and (not (ontower ?r ?t))
		   (not (clear ?r))
		   (not (onbase ?r))
		   (not (handempty))
		   (holding ?r)
		   (towerempty ?t)
		)
	)
  (:action putonbase
	     :parameters (?r - ring ?t - tower)
	     :precondition (and (holding ?r) (towerempty ?t))
	     :effect
	     (and (not (holding ?r)) 
		   (not (towerempty ?t))
		   (clear ?r)
		   (handempty)
		   (onbase ?r)
		   (ontower ?r ?t)))
)